import os
import cv2
import numpy as np
from transliterate import translit
import asyncio
import logging
from aiogram import Bot, Dispatcher, executor
#from aiogram.utils.exceptions import BotBlocked
import aiogram.utils.markdown as fmt
from requests import get
from aiogram.contrib.fsm_storage.memory import MemoryStorage
from aiogram.contrib.middlewares.logging import LoggingMiddleware
from confidence_info.your_config import TOKEN
from confidence_info.your_dir import main_img_dir
from interface.all_states import *
from interface.markups import *


bot = Bot(token = TOKEN)
dp = Dispatcher(bot, storage=MemoryStorage())
logging.basicConfig(level = logging.INFO)

dp.middleware.setup(LoggingMiddleware())

tokens = {"negative": False, "gamma": False, "gray": False, "mean_shift": False,
        "color_range": False, "flag": 0}

# –í—Å–ø–æ–º–æ–≥–∞—Ç–µ–ª—å–Ω—ã–µ —Ñ—É–Ω–∫—Ü–∏–∏
async def send_error_to_user(message, error_type):
    await send_img_text_sticker(message, None, error_type, "error", None)

async def send_img_text_sticker(message, img_path, text, sticker, reply_markup = None):
    if img_path is not None:
        try:
            await bot.send_photo(message.chat.id, photo=open(img_path, 'rb'))
        except:
            try:
                await bot.send_photo(message.chat.id, get(img_path).content)
            except:
                await send_error_to_user(message, "–û—à–∏–±–∫–∞ –≤ –ø–æ–ª—É—á–µ–Ω–∏–∏ –ø—É—Ç–∏ –∫ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—é")
    send = await bot.send_message(message.chat.id, text, parse_mode='html', reply_markup = reply_markup)
    await bot.send_sticker(message.chat.id, open('Stickers/{}.webp'.format(sticker), 'rb'))
    return send

def create_save_path(message, images_type):
    user_images_dir = os.path.join(main_img_dir, translit(message.from_user.first_name, language_code='ru', reversed=True))
    src = os.path.join(user_images_dir, images_type + "_" + translit(message.from_user.first_name, language_code='ru', reversed=True) + ".jpg")
    return src


@dp.message_handler(commands = "start", state = "*")
async def start_message(message: types.Message):
    me = await bot.get_me()
    await send_img_text_sticker(message, None, f"{fmt.hide_link('https://www.youtube.com/watch?v=l6LC7B00fWw')}–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å {message.from_user.first_name}!\n"
                                f"–Ø - <b>{me.first_name}</b>, –í—Å–µ–º–æ–≥—É—â–µ–µ –í—Å–µ—Å—É—â–µ–µ –ó–ª–æ!\n –∏–ª–∏ –ø—Ä–æ—Å—Ç–æ –±–æ—Ç —Å–æ–∑–¥–∞–Ω–Ω—ã–π –æ–±—Ä–∞–±–æ—Ç–∞—Ç—å", "hello", reply_markup = start_markup)
    await StartManagment.ice_crem_not_done.set()

@dp.message_handler(commands = "help", state = "*")
async def help_message(message: types.Message):
    me = await bot.get_me()
    await send_img_text_sticker(message, None, 
                                f"–î–∞–≤–∞–π-–∫–∞ —è –ø–æ–¥—Å–∫–∞–∂—É —Ç–µ–±–µ –ø–æ –ø–æ–≤–æ–¥—É —Ñ–∏–ª—å—Ç—Ä–æ–≤..\n"
                                f"<b>–ù–µ–≥–∞—Ç–∏–≤</b> - —Å–∞–º—ã–π –ø—Ä–æ—Å—Ç–æ–π, –∑–Ω–∞—á–µ–Ω–∏—è –∫–∞–Ω–∞–ª–æ–≤ —Ü–≤–µ—Ç–∞ –º–µ–Ω—è—é—Ç—Å—è –Ω–∞ –ø—Ä–æ—Ç–∏–≤–æ–ø–æ–ª–æ–∂–Ω—ã–µ\n"
                                f"<b>–ì–∞–º–º–∞-—Ñ–∏–ª—å—Ç—Ä</b> - —á—É—Ç—å –ø–æ—Å–ª–æ–∂–Ω–µ–µ, –≤ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –æ—Ç –∫–æ—ç—Ñ—Ñ–∏—Ü–∏–µ–Ω—Ç–∞ –≥–∞–º–º–∞ –º–µ–Ω—è–µ—Ç—Å—è –∏–Ω—Ç–µ–Ω—Å–∏–≤–Ω–æ—Å—Ç—å(—è—Ä–∫–æ—Å—Ç—å) –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è\
                                –ø–æ—Å–≤–µ—Ç–ª–µ–µ, –ø–æ—Ç–µ–º–Ω–µ–µ, –≤—Å—ë —Ç–∞–∫–æ–µ..\n"
                                f"<b>–ß—ë—Ä–Ω–æ-–±–µ–ª—ã–π</b> - –Ω—É —Ç—É—Ç—å –≤—Å—ë –ø–æ–Ω—è—Ç–Ω–æ, –Ω–∞—Ö–æ–¥–∏–º –∏–Ω—Ç–µ–Ω—Å–∏–≤–Ω–æ—Å—Ç—å –∫–∞—Ä—Ç–∏–Ω–∫–∏ –∏ —Å–∫–∞–ª–∏—Ä—É–µ–º –µ–µ –≤ –æ—Ç—Ç–µ–Ω–∫–∞—Ö –æ—Ç —á–µ—Ä–Ω–æ–≥–æ –¥–æ –±–µ–ª–æ–≥–æ —Ü–≤–µ—Ç–æ–≤\n"
                                f"<b>–°—Ä–µ–¥–Ω–∏–π —Å–¥–≤–∏–≥</b> - —Å–∫–∞–∂—É –ø–æ-–Ω–∞—É—á–Ω–æ–º—É, –æ–Ω –∑–∞–º–µ–Ω—è–µ—Ç –∫–∞–∂–¥—ã–π –ø–∏–∫—Å–µ–ª—å —Å—Ä–µ–¥–Ω–∏–º –∑–Ω–∞—á–µ–Ω–∏–µ–º –ø–∏–∫—Å–µ–ª–µ–π –≤ —Å–≤–æ–µ–π –æ–∫—Ä–µ—Å—Ç–Ω–æ—Å—Ç–∏ –º–∞—Ç—Ä–∏—Ü—ã —Ä–∞–¥–∏—É—Å–∞ r üßê\–≤ –æ–±—â–µ–º –≥–ª–∞–¥–∏—Ç —Ñ–æ—Ç–æ\n"
                                f"–¢—ã –µ—â–µ –Ω–µ —É—Å–Ω—É–ª? –û—É, –Ω–µ—Ç.. –õ–∞–¥–Ω–æ —Ç–æ–≥–¥–∞ –ø—Ä–æ–¥–æ–ª–∂–∏–º\n"
                                f"<b>–¶–≤–µ—Ç–æ–≤–æ–π –¥–∏–∞–ø–∞–∑–æ–Ω</b> - –¥–∞ —Ç—É—Ç –ª–µ–≥–∫–æ, —ç—Ç–∞ —à—Ç—É–∫–∞ –≤—ã–¥–µ–ª—è–µ—Ç –¥–∏–∞–ø–∞–∑–æ–Ω —Ü–≤–µ—Ç–æ–≤, –∫–æ—Ç–æ—Ä—ã–π —Ç—ã –ø—Ä–∏–∫–∞–∂–µ—à—å\
                                –∏ –Ω–∞ –∫–∞—Ä—Ç–∏–Ω–∫–µ –∫—Ä–∞—Å–∏—Ç –µ–≥–æ –≤ –±–µ–ª—ã–π. –ü—Ä–µ–æ–±—Ä–∞–∑–æ–≤—ã–≤–µ–º –∫–∞—Ä—Ç–∏–Ω–∫—É –≤ —Ñ–æ—Ä–º–∞—Ç HSV (–Ω—É —Ç—ã –∑–Ω–∞–µ—à—å),\
                                —Å–æ–∑–¥–∞—ë–º HSV –º–∞—Å—Å–∏–≤—ã –æ—Ç –º–∏–Ω–∏–º—É–º–∞ –Ω–∞—à–µ–≥–æ –æ—Ç—Ç–µ–Ω–∫–∞ —Ü–≤–µ—Ç–∞ –¥–æ –º–∞–∫—Å–∏–º—É–º–∞, –Ω—É –∞ –¥–∞–ª—å—à–µ –≤—Å—ë –ø–æ–Ω—è—Ç–Ω–æ,\
                                —ç—Ç–æ –ø—Ä–æ—Å—Ç–µ–π—à–∞—è —Ä–µ–∞–ª–∏–∑–∞—Ü–∏—è, –º–Ω–æ–≥–æ–≥–æ –æ—Ç –Ω–µ–µ –Ω–µ –æ–∂–∏–¥–∞–π üôÑ\n", "stupid", reply_markup = start_markup)
    await StartManagment.ice_crem_not_done.set()


#@dp.message_handler(commands="block", state = "*")
#async def cmd_block(message: types.Message):
#    await asyncio.sleep(10.0)  # –ó–¥–æ—Ä–æ–≤—ã–π —Å–æ–Ω –Ω–∞ 10 —Å–µ–∫—É–Ω–¥
#    await message.reply("–í—ã –∑–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω—ã")

@dp.message_handler(lambda message: message.text == "üçß –•–æ—á—É –º–æ—Ä–æ–∂–µ–Ω–∫—É", state = StartManagment.ice_crem_not_done)
async def wanted_icecrem_first_time(message: types.Message):
    await send_img_text_sticker(message, "https://sc01.alicdn.com/kf/UTB8CFH3C3QydeJk43PUq6AyQpXah/200128796/UTB8CFH3C3QydeJk43PUq6AyQpXah.jpg",
                                "–£–ø—Å, —è —É–∂–µ –≤—Å–µ —Å—ä–µ–ª–∞", "hehe", start_markup)
    await send_img_text_sticker(message, None, f"{message.from_user.id}", "nono", None)
    await state.set_state(StartManagment.ice_crem_done)

@dp.message_handler(lambda message: message.text == "üçß –•–æ—á—É –º–æ—Ä–æ–∂–µ–Ω–∫—É", state = StartManagment.ice_crem_done)
async def wanted_icecrem_other_time(message: types.Message):
    await send_img_text_sticker(message, "https://tortodelfeo.ru/wa-data/public/shop/products/88/27/2788/images/2648/2648.750.png",
                                "–î—É–º–∞–µ—à—å —á—Ç–æ-—Ç–æ –∏–∑–º–µ–Ω–∏–ª–æ—Å—å, –ø—É–ø—Å–∏–∫ ?", "he", start_markup)

@dp.message_handler(lambda message: message.text == "üé® –ú–Ω–µ –Ω—É–∂–Ω–æ –æ–±—Ä–∞–±–æ—Ç–∞—Ç—å –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ", state = StartManagment.states)
async def image_processing(message: types.Message):
    #await bot.send_message(message.chat.id, message.text, types.ReplyKeyboardRemove())
    await send_img_text_sticker(message, None, '–¢–µ–±–µ —Ç–æ—á–Ω–æ –µ—Å—Ç—å 18 ?', "18", markup_for_answer)
    await ImageDownload.download_not_complete.set()

@dp.message_handler(state = ImageDownload.download_not_complete)
async def echo_message(message: types.Message):
    await send_img_text_sticker(message, None, "–ß–µ–≥–æ —è —Ç–∞–º –Ω–µ –≤–∏–¥–µ–ª–∞, –æ—Ç–≤–µ—Ç—å –Ω–∞ –≤–æ–ø—Ä–æ—Å, –º–∞–ª—ã—à, —Ç–µ–±–µ –µ—Å—Ç—å 18 ?",
                                 "be", markup_for_answer)

@dp.callback_query_handler(text = "years_old_18", state = "*")
async def send_random_value(call: types.CallbackQuery):
    await send_img_text_sticker(call.message, None, "–ö–∏–¥–∞–π —Å–≤–æ—é –∫–∞—Ä—Ç–∏–Ω–∫—É...", "giveaphoto", types.ReplyKeyboardRemove())
    await bot.edit_message_text(chat_id=call.message.chat.id, message_id=call.message.message_id, text='–¢–µ–±–µ —Ç–æ—á–Ω–æ –µ—Å—Ç—å 18 ?',
                reply_markup=None)
    await ImageDownload.prepare_downloading.set()
    asyncio.sleep(4)
    await bot.answer_callback_query(callback_query_id=call.id, show_alert=False,
                              text = "–Ø —É–∂–µ –∑–∞–∂–¥–∞–ª–∞—Å—å —Ç–≤–æ–µ–≥–æ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è")

@dp.callback_query_handler(text = "years_old_not_18", state = "*")
async def send_random_value(call: types.CallbackQuery):
    await send_img_text_sticker(call.message, None, "–ù—É –Ω–∏—á–µ–≥–æ, —Å–æ –≤—Å–µ–º–∏ –±—ã–≤–∞–ª–æ, –∑–∞–≥—Ä—É–∂–∞–π –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ!", "giveaphoto", types.ReplyKeyboardRemove())
    await bot.edit_message_text(chat_id=call.message.chat.id, message_id=call.message.message_id, text='–¢–µ–±–µ —Ç–æ—á–Ω–æ –µ—Å—Ç—å 18 ?',
                reply_markup=None)
    await ImageDownload.prepare_downloading.set()
    asyncio.sleep(4)
    await bot.answer_callback_query(callback_query_id=call.id, show_alert=False,
                              text = "–Ø —É–∂–µ –∑–∞–∂–¥–∞–ª–∞—Å—å —Ç–≤–æ–µ–≥–æ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è")

@dp.message_handler(content_types = ["photo"], state = StartManagment.states)
async def download_photo(message: types.Message):
    await send_img_text_sticker(message, None, "–¢—ã —Å–ª–∏—à–∫–æ–º —Ç–æ—Ä–æ–ø–∏—à—å—Å—è, —è –Ω–µ —Ç–∞–∫–∞—è", "nono", None)

@dp.message_handler(content_types = ["photo"], state = ImageDownload.download_done)
async def download_photo(message: types.Message):
    await send_img_text_sticker(message, None, "–Ø –Ω–µ –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞—é —Å–ª—É—á–∞–Ω–æ–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ, –∑–∞–π–∫–∞", "dontrush", start_markup)

@dp.message_handler(content_types = ["photo"], state = ImageDownload.download_not_complete)
async def download_photo(message: types.Message):
    await send_img_text_sticker(message, None, "–¢—ã —Å–ª–∏—à–∫–æ–º —Ç–æ—Ä–æ–ø–∏—à—å—Å—è, —è –Ω–µ —Ç–∞–∫–∞—è", "nono", None)

@dp.message_handler(content_types = ["photo"], state = Filters.states)
async def download_photo(message: types.Message):
    await send_img_text_sticker(message, None, "–ò –∑–∞—á–µ–º –º–Ω–µ —ç—Ç–æ —Å–µ–π—á–∞—Å ?", "stupid", None)

@dp.message_handler(content_types = ["photo"], state = ImageDownload.prepare_downloading)
async def download_photo(message: types.Message):
    try:
        user_images_dir = os.path.join(main_img_dir, translit(message.from_user.first_name, language_code='ru', reversed=True))
        #user_images_dir = os.path.join(main_img_dir, str(message.from_user.id))
        src = create_save_path(message, "source")
        try:
            await message.photo[-1].download(destination = src)
        except:
            os.mkdir(user_images_dir)
            await message.photo[-1].download(destination = src)
        await send_img_text_sticker(message, None, "–§–æ—Ç–æ –¥–æ–±–∞–≤–ª–µ–Ω–æ, –±—Ä–∞—Ç–∏–∫, –±–µ–∑ —Å–ª—ë–∑ –Ω–µ –≤–∑–≥–ª—è–Ω–µ—à—å, –¥–∞–π–∫–∞ —è –ø–æ—Ä–∞–±–æ—Ç–∞—é", "omg", filters_markup)
        await ImageDownload.download_done.set()
        tokens["negative"] = False
        tokens["mean_shift"] = False
        tokens["gray"] = False
        tokens["gamma"] = False
        tokens["color_range"] = False
    except:
        await send_error_to_user(message, "–£ –º–µ–Ω—è –Ω–µ –ø–æ–ª—É—á–∏–ª–æ—Å—å –∑–∞–≥—Ä—É–∑–∏—Ç—å –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ, —Ç—ã –±—ã–ª —Å–ª–∏—à–∫–æ–º —Ä–µ–∑–æ–∫.. \n –ü–æ–ø—Ä–æ–±—É–π –¥—Ä—É–≥–æ–µ üòü")

@dp.message_handler(lambda message: message.text == "–ò—Å—Ö–æ–¥–Ω–∏–∫", state = ImageDownload.download_done)
async def get_source(message: types.Message):
    try:
        img_path = create_save_path(message, "source")
        await send_img_text_sticker(message, img_path, "–° —Ç–∞–∫–æ–≥–æ —Ä–∞–∫—É—Ä—Å–∞ —Å—Ç–∞–ª–æ —Ç–æ–ª—å–∫–æ —Ö—É–∂–µ XD", "haha", None)
    except:
        await send_error_to_user(message, "–û–π, –∞ —è –Ω–µ –≤–∏–¥–µ–ª–∞ —Ç–≤–æ–∏—Ö —Ñ–æ—Ç–æ—á–µ–∫ –µ—â–µ...")

@dp.message_handler(lambda message: message.text == "–ù–µ–≥–∞—Ç–∏–≤", state = ImageDownload.download_done)
async def filter_negative(message: types.Message):
    if (tokens["negative"] == False):
        src_img_path = create_save_path(message, "source")
        img_path = create_save_path(message, "negative")
        img = cv2.imread(src_img_path)
        img_not = cv2.bitwise_not(img)
        cv2.imwrite(img_path, img_not)
        await send_img_text_sticker(message, img_path, "–ú–º–º, –∫–∞–∫–∞—è –∫—Ä–∞—Å–∏–≤–∞—è —Ñ–æ—Ç–æ—á–∫–∞", "looksgood", None)
        tokens["negative"] = True
    else:
        img_path = create_save_path(message, "negative")
        await send_img_text_sticker(message, img_path, "–Ø —á—Ç–æ —Ç–µ–±–µ —Ä–æ–±–æ—Ç —Ç—É–¥–∞ —Å—é–¥–∞ –µ–µ –ø—Ä–µ–æ–±—Ä–∞–∑–æ–≤—ã–≤–∞—Ç—å?", "iamnotarobot")

@dp.message_handler(lambda message: message.text == "–ß–µ—Ä–Ω–æ-–±–µ–ª—ã–π", state = ImageDownload.download_done)
async def filter_gray_scale(message: types.Message):
    if tokens.get('gray') == False:
        src_img_path = create_save_path(message, "source")
        img_path = create_save_path(message, "gray")
        img = cv2.imread(src_img_path)
        img_gray = cv2.cvtColor(img, cv2.COLOR_BGR2GRAY)
        cv2.imwrite(img_path, img_gray)
        await send_img_text_sticker(message, img_path, "–ú–º–º, –∫–∞–∫–∞—è –∫—Ä–∞—Å–∏–≤–∞—è —Ñ–æ—Ç–æ—á–∫–∞", "looksgood", None)
        tokens['gray'] = True
    else:
        img_path = create_save_path(message, "gray")
        await send_img_text_sticker(message, img_path, "–Ø —á—Ç–æ —Ç–µ–±–µ —Ä–æ–±–æ—Ç —Ç—É–¥–∞ —Å—é–¥–∞ –µ–µ –ø—Ä–µ–æ–±—Ä–∞–∑–æ–≤—ã–≤–∞—Ç—å?", "iamnotarobot")

@dp.message_handler(lambda message: message.text == "–¶–≤–µ—Ç–æ–≤–æ–π –¥–∏–∞–ø–∞–∑–æ–Ω", state = ImageDownload.download_done)
async def colors(message: types.Message):
    await send_img_text_sticker(message, None, "–í–≤–µ–¥–∏ –æ–¥–∏–Ω –∏–∑ —Ü–≤–µ—Ç–æ–≤ —Ä–∞–¥—É–≥–∏, –¥–æ—Ä–æ–≥—É—à–∞","mayi", colors_markup)
    await Filters.color_range_working.set()

@dp.message_handler(state = Filters.color_range_working)
async def Color_Range(message: types.Message):
    # try:
        src_img_path = create_save_path(message, "source")
        img_path = create_save_path(message, "color_range")
        img = cv2.imread(src_img_path)
        img = cv2.bilateralFilter(img,9,75,75)
        if message.text == '–ó–µ–ª—ë–Ω—ã–π' or message.text == '–∑–µ–ª—ë–Ω—ã–π' or message.text == '–∑–µ–ª–µ–Ω—ã–π' \
                                        or message.text == '–ó–µ–ª–µ–Ω—ã–π' or message.text == 'green':
            hsv_min = np.array((36, 25, 25), np.uint8)
            hsv_max = np.array((85, 255, 255), np.uint8)
        elif message.text == '–ö—Ä–∞—Å–Ω—ã–π' or message.text == '–∫—Ä–∞—Å–Ω—ã–π' or message.text == 'red':
            hsv_min = np.array((0, 25, 25), np.uint8)
            hsv_max = np.array((15, 255, 255), np.uint8)
        elif message.text == '–û—Ä–∞–Ω–∂–µ–≤—ã–π' or message.text == '–æ—Ä–∞–Ω–∂–µ–≤—ã–π' or message.text == 'orange':
            hsv_min = np.array((13, 25, 25), np.uint8)
            hsv_max = np.array((23, 255, 255), np.uint8)
        elif message.text == '–ñ—ë–ª—Ç—ã–π' or message.text == '–∂—ë–ª—Ç—ã–π' or message.text == '–∂–µ–ª—Ç—ã–π' \
                                     or message.text == '–ñ–µ–ª—Ç—ã–π' or message.text == 'yellow':
            hsv_min = np.array((20, 25, 25), np.uint8)
            hsv_max = np.array((40, 255, 255), np.uint8)
        elif message.text == '–ì–æ–ª—É–±–æ–π' or message.text == '–≥–æ–ª—É–±–æ–π' or message.text == 'blue':
            hsv_min = np.array((83, 25, 25), np.uint8)
            hsv_max = np.array((103, 255, 255), np.uint8)
        elif message.text == '–°–∏–Ω–∏–π' or message.text == '—Å–∏–Ω–∏–π' or message.text == 'light blue':
            hsv_min = np.array((103, 25, 25), np.uint8)
            hsv_max = np.array((133, 255, 255), np.uint8)
        elif message.text == '–§–∏–æ–ª–µ—Ç–æ–≤—ã–π' or message.text == '—Ñ–∏–æ–ª–µ—Ç–æ–≤—ã–π' or message.text == 'purple':
            hsv_min = np.array((135, 0, 0), np.uint8)
            hsv_max = np.array((155, 255, 255), np.uint8)
        else:
            await send_img_text_sticker(message, None, "–°–∫–∞–∑–∞–ª–∞ –∂–µ, —Ü–≤–µ—Ç–∞ —Ä–∞–¥—É–≥–∏ \n –ö–∞–∂–¥—ã–π –æ—Ö–æ—Ç–Ω–∏–∫ –∂–µ–ª–∞–µ—Ç –∑–Ω–∞—Ç—å..", "kus", None)
        hsv = cv2.cvtColor(img, cv2.COLOR_BGR2HSV)
        img_hsv = cv2.inRange(hsv, hsv_min, hsv_max)
        cv2.imwrite(img_path, img_hsv)
        tokens['color_range'] = True
        await send_img_text_sticker(message, img_path, "–ù–∏—á–µ–≥–æ —Å–µ–±–µ –∫–∞–∫ —è –º–æ–≥—É", "beautiful", filters_markup)
        await ImageDownload.download_done.set()
    # except:
    #     await send_img_text_sticker(message, None, "–ß—Ç–æ-—Ç–æ –ø–æ—à–ª–æ –Ω–µ —Ç–∞–∫, –ø—Ä–æ—Å—Ç–∏..", "cry", filters_markup)
    #     ImageDownload.download_done.set()

@dp.message_handler(lambda message: message.text == "–ì–∞–º–º–∞ –§–∏–ª—å—Ç—Ä", state = ImageDownload.download_done)
async def filter_gamma(message: types.Message):
    tokens["flag"] = 0
    if tokens["gamma"] == False:
        await send_img_text_sticker(message, None, "–¢–µ–±–µ –ø–æ–¥—Å–∫–∞–∑–∞—Ç—å –∑–Ω–∞—á–µ–Ω–∏–µ –≥–∞–º–º–∞, –º–∏–ª–∞—à–∫–∞?","mayi", baby_help_markup)
        await Filters.gamma_working.set()
    else:
        await send_img_text_sticker(message, None, "–í–≤–µ–¥–∏ —Å–≤–æ–µ –∑–Ω–∞—á–µ–Ω–∏–µ –≥–∞–º–º–∞, —Å–ª–∞–¥–∫–∏–π", "giveme", baby_enough_markup)
        await Filters.gamma_working.set()

def adjust_gamma(image, gamma = 1.0):
    invGamma = 1.0 / gamma
    table = np.array([((i / 255.0) ** invGamma) * 255
        for i in np.arange(0, 256)]).astype("uint8")
    return cv2.LUT(image, table)

@dp.message_handler(state = Filters.gamma_working)
async def Gamma_Function(message):
    if message.text == '0.5 –ù–µ–º–Ω–æ–≥–æ –∑–∞—Ç–µ–º–Ω–∏—Ç—å':
        if tokens.get('gamma') == False:
            src_img_path = create_save_path(message, "source")
        else:
            src_img_path = create_save_path(message, "gamma")
        img_path = create_save_path(message, "gamma")
        img = cv2.imread(src_img_path)
        img_gamma = adjust_gamma(img, 0.5)
        img = cv2.imwrite(img_path, img_gamma)
        await send_img_text_sticker(message, img_path, "–£—Ö, –∫–∞–∫ –∂–µ –∫—Ä–∞—Å–∏–≤–æ —Å—Ç–∞–ª–æ", "beautiful", filters_markup)
        tokens['gamma'] = True
        await ImageDownload.download_done.set()
    elif message.text == '1.5 –ù–µ–º–Ω–æ–≥–æ –æ—Å–≤–µ—Ç–ª–∏—Ç—å':
        if tokens.get('gamma') == False:
            src_img_path = create_save_path(message, "source")
        else:
            src_img_path = create_save_path(message, "gamma")
        img_path = create_save_path(message, "gamma")
        img = cv2.imread(src_img_path)
        img_gamma = adjust_gamma(img, 1.5)
        img = cv2.imwrite(img_path, img_gamma)
        await send_img_text_sticker(message, img_path, "–ù–∞–º–Ω–æ–≥–æ –ª—É—á—à–µ, —á–µ–º –±—ã–ª–æ üòâ", "nowbetter", filters_markup)
        tokens['gamma'] = True
        await ImageDownload.download_done.set()
    elif message.text == '–ü–µ—Ä–µ—Å—Ç–∞–Ω—å (reset brightnes)':
        await send_img_text_sticker(message, None, "–õ–∞–¥–Ω–æ, –ª–∞–¥–Ω–æ", "evil", filters_markup)
        tokens['gamma'] = False
        await ImageDownload.download_done.set()
    else:
        try:
            gamma = (float)(message.text)
        except:
            tokens["flag"] += 1
            if tokens["flag"] == 1:
                await send_img_text_sticker(message, None, "–ì–∞–º–º–∞ —ç—Ç–æ –ø—Ä–æ—Å—Ç–æ —á–∏—Å–ª–æ!", "kus", baby_help_markup)
            if tokens["flag"] == 2:
                await send_img_text_sticker(message, None, "–ò–∑–¥–µ–≤–∞–µ—à—å—Å—è, –¥–∞?", "cry", filters_markup)
                await ImageDownload.download_done.set()
        if tokens["flag"] == 0:
            if tokens.get('gamma') == False:
                src_img_path = create_save_path(message, "source")
            else:
                src_img_path = create_save_path(message, "gamma")
            img_path = create_save_path(message, "gamma")
            img = cv2.imread(src_img_path)
            img_gamma = adjust_gamma(img, gamma)
            img = cv2.imwrite(img_path, img_gamma)
            await send_img_text_sticker(message, img_path, "–û –¥–∞, —è –¥–∞–∂–µ –Ω–µ –æ–∂–∏–¥–∞–ª–∞, —á—Ç–æ —Ç–∞–∫ —Ö–æ—Ä–æ—à–æ –ø–æ–ª—É—á–∏—Ç—Å—è", "thatsgood", filters_markup)
            await ImageDownload.download_done.set()

@dp.message_handler(lambda message: message.text == "–°—Ä–µ–¥–Ω–∏–π —Å–¥–≤–∏–≥", state = ImageDownload.download_done)
async def filter_meanshift(message: types.Message):
    if tokens.get('mean_shift') == False:
        src_img_path = create_save_path(message, "source")
        img_path = create_save_path(message, "mean_shift")
        img = cv2.imread(src_img_path)
        image_shifted = cv2.pyrMeanShiftFiltering(img, 10, 25)
        cv2.imwrite(img_path, image_shifted)
        await send_img_text_sticker(message, img_path, "–ê—Ö, –∫–∞–∫ –∂–µ —è —Ö–æ—Ä–æ—à–æ –ø–æ—Ä–∞–±–æ—Ç–∞–ª–∞", "wow", None)
        tokens['mean_shift'] = True
    else:
        img_path = create_save_path(message, "mean_shift")
        await send_img_text_sticker(message, img_path, "–¢—ã —É–∂–µ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–ª —ç—Ç–æ—Ç —Ñ–∏–ª—å—Ç—Ä, –∏–º–µ–π —Å–æ–≤–µ—Å—Ç—å! –Ø —Ç—É—Ç –Ω–µ –±–µ–∑ –¥–µ–ª–∞ —Å–∏–∂—É ...", "tired")

@dp.message_handler(lambda message: message.text == "–Ø —É—Å—Ç–∞–ª", state = ImageDownload.download_done)
async def image_processing(message: types.Message):
    await send_img_text_sticker(message, None, "–ë–µ–¥–Ω–µ–Ω—å–∫–∏–π, –¥–∞–≤–∞–π —è —Ç–µ–±—è –ø–æ–º–æ–≥—É —Ç–µ–±–µ —Ä–∞—Å—Å–ª–∞–±–∏—Ç—å—Å—è ...", "relax", start_markup)
    await StartManagment.ice_crem_not_done.set()

@dp.message_handler(content_types = [types.ContentType.ANIMATION])
async def echo_document(message: types.Message):
    await message.reply_animation(message.animation.file_id)

#@dp.errors_handler(exception=BotBlocked)
#async def error_bot_blocked(update: types.Update, exception: BotBlocked):
#    # Update: –æ–±—ä–µ–∫—Ç —Å–æ–±—ã—Ç–∏—è –æ—Ç Telegram. Exception: –æ–±—ä–µ–∫—Ç –∏—Å–∫–ª—é—á–µ–Ω–∏—è
#    # –ó–¥–µ—Å—å –º–æ–∂–Ω–æ –∫–∞–∫-—Ç–æ –æ–±—Ä–∞–±–æ—Ç–∞—Ç—å –±–ª–æ–∫–∏—Ä–æ–≤–∫—É, –Ω–∞–ø—Ä–∏–º–µ—Ä, —É–¥–∞–ª–∏—Ç—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∏–∑ –ë–î
#    print(f"–ú–µ–Ω—è –∑–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–ª –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å!\n–°–æ–æ–±—â–µ–Ω–∏–µ: {update}\n–û—à–∏–±–∫–∞: {exception}")

#    # –¢–∞–∫–æ–π —Ö—ç–Ω–¥–ª–µ—Ä –¥–æ–ª–∂–µ–Ω –≤—Å–µ–≥–¥–∞ –≤–æ–∑–≤—Ä–∞—â–∞—Ç—å True,
#    # –µ—Å–ª–∏ –¥–∞–ª—å–Ω–µ–π—à–∞—è –æ–±—Ä–∞–±–æ—Ç–∫–∞ –Ω–µ —Ç—Ä–µ–±—É–µ—Ç—Å—è.
#    return True

#@dp.message_handler(commands = "answer")
#async def cmd_answer(message: types.Message):
#    await message.answer("–≠—Ç–æ –ø—Ä–æ—Å—Ç–æ–π –æ—Ç–≤–µ—Ç")

#@dp.message_handler(commands="reply")
#async def cmd_reply(message: types.Message):
#    await message.reply('–≠—Ç–æ –æ—Ç–≤–µ—Ç —Å "–æ—Ç–≤–µ—Ç–æ–º"')

@dp.message_handler(state = "*")
async def echo_message(message):
    await send_img_text_sticker(message, None,
    f"–Ø –Ω–µ –∑–Ω–∞—é —á—Ç–æ –æ—Ç–≤–µ—Ç–∏—Ç—å üò¢\n"
    f"–î–æ—Å—Ç—É–ø–Ω—ã–µ –∫–æ–º–∞–Ω–¥—ã: \n/start - –ø–æ–ª–Ω–∞—è –ø–µ—Ä–µ–∑–∞–≥—Ä—É–∑–∫–∞ \n"
    f"/help - –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –¥–æ—Å—Ç—É—Ä–Ω—ã—Ö —Ñ–∏–ª—å—Ç—Ä–∞—Ö", "noanswer", start_markup)

if __name__ == "__main__":
    # –ó–∞–ø—É—Å–∫ –±–æ—Ç–∞
    executor.start_polling(dp, skip_updates=True)